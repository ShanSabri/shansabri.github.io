<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on </title>
    <link>https://shansabri.github.io/post/</link>
    <description>Recent content in Posts on </description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 18 Aug 2019 15:48:02 -0700</lastBuildDate>
    
	    <atom:link href="https://shansabri.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Encapsulating functions to promote stricter functional programming</title>
      <link>https://shansabri.github.io/post/post2/</link>
      <pubDate>Sun, 18 Aug 2019 15:48:02 -0700</pubDate>
      
      <guid>https://shansabri.github.io/post/post2/</guid>
      <description>&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Imagine the following scenario:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;y_global &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;
add_nums &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;function&lt;/span&gt;(x, y, z) { x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; y_global &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; z }
&lt;span style=&#34;color:#a6e22e&#34;&gt;add_nums&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [1] 46
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;46?! What’s happening here is that R is using a variable outside of
&lt;code&gt;add_nums&lt;/code&gt; scope. R does not have strict pragma such as other languages
(e.g. &lt;code&gt;use strict&lt;/code&gt; in Perl) and this can be a bit bothersome.
And as a consequence this happens to me way more often than I’d like to admit,
and I think this can be really dangerous, as the error is silent.&lt;/p&gt;
&lt;p&gt;I came across this StackOverflow
&lt;a href=&#34;https://stackoverflow.com/questions/6216968/r-force-local-scope&#34;&gt;thread&lt;/a&gt;
that suggests a workaround to wrap a function with &lt;code&gt;local&lt;/code&gt;. It’s a
clever idea but I think it’s a bit messy and has a level of complexity
that could be simplified. So I came up with a strategy to avoid these
situations, which is to encapsulate functions in their own environment
detached from &lt;code&gt;global_env&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here, I have a helper function that I use in most of the analyses I do.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;encapsulate &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;function&lt;/span&gt;(fxn) {
  nenv &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;new.env&lt;/span&gt;(parent &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;baseenv&lt;/span&gt;())
  &lt;span style=&#34;color:#a6e22e&#34;&gt;environment&lt;/span&gt;(fxn) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; nenv
  &lt;span style=&#34;color:#a6e22e&#34;&gt;return&lt;/span&gt;(fxn)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Using it is really simple, just wrap &lt;code&gt;encapsulate&lt;/code&gt; around the function
definition. As an example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;y_global &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;
add_nums &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;encapsulate&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;function&lt;/span&gt;(x, y, z) {x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; y_global &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; z})
&lt;span style=&#34;color:#a6e22e&#34;&gt;add_nums&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# ERROR&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## Error in add_nums(1, 2, 3): object &#39;y_global&#39; not found
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# fixing the issue&lt;/span&gt;
add_nums &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;encapsulate&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;function&lt;/span&gt;(x, y, z) {x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; y &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; z})
&lt;span style=&#34;color:#a6e22e&#34;&gt;add_nums&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# SUCCESS&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## [1] 6
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The benefits of using such approach is that [1] promote functional
programming by disallowing global variables to be used inside function
body and [2] package functions must be namespaced explicitly (e.g.
&lt;code&gt;dplyr::select&lt;/code&gt;). The only downfall that I can think of for such an approach is the overhead
of environmental space which could potentially be a problem when loading large data in memory with little RAM,
and having a bit more keystrokes in your code.&lt;/p&gt;
&lt;p&gt;Now one thing to keep in mind is that if you are writing R packages, the
check process will flag this kind of error with no shenanigans like
this. Also note that the auto search up the environment path is a key
feature of the R programming language…&lt;/p&gt;
&lt;p&gt;The takeaway here is to not expect static code checking tools to find all your mistakes. Check your code with tests! Having test functions built using the &lt;code&gt;testthat&lt;/code&gt; package has a lot of benefits and highlighting such issues so they don’t get pass the debugger.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Assignment operators in R</title>
      <link>https://shansabri.github.io/post/post1/</link>
      <pubDate>Wed, 24 Jul 2019 16:36:57 -0700</pubDate>
      
      <guid>https://shansabri.github.io/post/post1/</guid>
      <description>&lt;p&gt;The operators &lt;code&gt;&amp;lt;-&lt;/code&gt; and &lt;code&gt;=&lt;/code&gt; can be used, almost interchangeably, to assign to variable in the same environment. Yet, &lt;code&gt;&amp;lt;-&lt;/code&gt; is preferred and advised in R Coding style guides from &lt;a href=&#34;https://google.github.io/styleguide/Rguide.xml#assignment&#34;&gt;Google&lt;/a&gt; and &lt;a href=&#34;http://adv-r.had.co.nz/Style.html&#34;&gt;Hadley&lt;/a&gt;. Some users pointed out on &lt;a href=&#34;https://twitter.com/_colinfay/status/1006139974377443328?lang=en&#34;&gt;Twitter&lt;/a&gt; that this makes code slightly more difficult to read if you come from another programming language. &lt;code&gt;&amp;lt;-&lt;/code&gt; is used in &lt;code&gt;F#&lt;/code&gt;, &lt;code&gt;OCaml&lt;/code&gt;, &lt;code&gt;R&lt;/code&gt; and &lt;code&gt;S&lt;/code&gt; to my knowledge. Even if &lt;code&gt;&amp;lt;-&lt;/code&gt; is generally rare in programming, I suppose its meaning is quite easy to grasp (it&amp;rsquo;s an assignment arrow). Nonetheless this led me down a rabbit hole trying to determine the functional differences with these two assignment operators.&lt;/p&gt;
&lt;p&gt;This is not just a matter of style and interpretability. There are functional consequences if assignment opperators in R are using incorrectly. R will treat &lt;code&gt;=&lt;/code&gt; as a named function argument before it will interpret it as assignment. As an example of where this makes a practical difference:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;within&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;data.frame&lt;/span&gt;(a&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;rnorm&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)), b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a^2) &lt;span style=&#34;color:#75715e&#34;&gt;# Error&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## Error in eval(substitute(expr), e): argument is missing, with no default
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;within&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;data.frame&lt;/span&gt;(a&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;rnorm&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)), b &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; a^2) &lt;span style=&#34;color:#75715e&#34;&gt;# Success&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;##            a          b
## 1 -0.5221077 0.27259643
## 2  0.1855074 0.03441299
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or when you want to handle a possible
exception:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;tryCatch&lt;/span&gt;(x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;runif&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)) &lt;span style=&#34;color:#75715e&#34;&gt;# Error&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;## Error in tryCatchList(expr, classes, parentenv, handlers): argument &amp;quot;expr&amp;quot; is missing, with no default
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;tryCatch&lt;/span&gt;(x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;runif&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)) &lt;span style=&#34;color:#75715e&#34;&gt;# Success&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So, if you use &lt;code&gt;=&lt;/code&gt; for assignment, you have to remember to treat these situations differently. Which results in your code needing extra levels of brackets/braces, or mixing &lt;code&gt;=&lt;/code&gt; and &lt;code&gt;&amp;lt;-&lt;/code&gt;. Or you could just use &lt;code&gt;&amp;lt;-&lt;/code&gt; everywhere you intend to do assignment and not worry about the edge cases. Keep in mind that this is not to be confused with the other, less common, assignment operators in R (e.g., &lt;code&gt;&amp;lt;&amp;lt;-&lt;/code&gt;, &lt;code&gt;-&amp;gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;:=&lt;/code&gt;, &lt;code&gt;_&lt;/code&gt;). I&amp;rsquo;ll hold off an explanation for a future blog post.&lt;/p&gt;
&lt;p&gt;IMO, &lt;code&gt;&amp;lt;-&lt;/code&gt; adds some charm to the use of the R programming language. I take pride in it for that reason.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
