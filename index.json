[{"authors":["admin"],"categories":null,"content":"Shan Sabri is a current Bioinformatics PhD student being co-mentored in the labs of Kathrin Plath and Jason Ernst at the University of California, Los Angeles. His research interest expand into the field of gene expression regulation, specifically relating to epigenetic mechanisms that maintain pluripotency and underly differentiation and reprogramming processes.\n","date":-62135596800,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"https://shansabri.github.io/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/admin/","section":"authors","summary":"Shan Sabri is a current Bioinformatics PhD student being co-mentored in the labs of Kathrin Plath and Jason Ernst at the University of California, Los Angeles. His research interest expand into the field of gene expression regulation, specifically relating to epigenetic mechanisms that maintain pluripotency and underly differentiation and reprogramming processes.","tags":null,"title":"Shan Sabri","type":"authors"},{"authors":[],"categories":[],"content":"\u0026ldquo;Encapsulation hides information not to faciliate fraud, but to prevent mistakes.\u0026rdquo; -Bjarne Stroustrup, original implementor of C++ \nImagine the following scenario:\ny_global \u0026lt;- 42 add_nums \u0026lt;- function(x, y, z) { x + y_global + z } add_nums(1,2,3)  ## [1] 46  46?! What’s happening here is that R is using a variable outside of add_nums scope. R does not have strict pragma such as other languages (e.g. use strict in Perl) and this can be a bit bothersome. And as a consequence this happens to me way more often than I’d like to admit, and I think this can be really dangerous, as the error is silent.\nI came across this StackOverflow thread that suggests a workaround to wrap a function with local. It’s a clever idea but I think it’s a bit messy and has a level of complexity that could be simplified. So I came up with a strategy to avoid these situations, which is to encapsulate functions in their own environment detached from global_env.\nHere, I have a helper function that I use in most of the analyses I do.\nencapsulate \u0026lt;- function(fxn) { nenv \u0026lt;- new.env(parent = baseenv()) environment(fxn) \u0026lt;- nenv return(fxn) }  Using it is really simple, just wrap encapsulate around the function definition. As an example:\ny_global \u0026lt;- 42 add_nums \u0026lt;- encapsulate(function(x, y, z) {x + y_global + z}) add_nums(1,2,3) # ERROR  ## Error in add_nums(1, 2, 3): object 'y_global' not found  # fixing the issue add_nums \u0026lt;- encapsulate(function(x, y, z) {x + y + z}) add_nums(1,2,3) # SUCCESS  ## [1] 6  The benefits of using such approach is that [1] promote functional programming by disallowing global variables to be used inside function body and [2] package functions must be namespaced explicitly (e.g. dplyr::select). The only downfall that I can think of for such an approach is the overhead of environmental space which could potentially be a problem when loading large data in memory with little RAM, and having a bit more keystrokes in your code.\nNow one thing to keep in mind is that if you are writing R packages, the check process will flag this kind of error with no shenanigans like this. Also note that the auto search up the environment path is a key feature of the R programming language…\nThe takeaway here is to not expect static code checking tools to find all your mistakes. Check your code with tests! Having test functions built using the testthat package has a lot of benefits and highlighting such issues so they don’t get pass the debugger.\n","date":1566254882,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1566254882,"objectID":"0c6f6cbe96ac9b1239a629e09477d6d1","permalink":"https://shansabri.github.io/post/post2/","publishdate":"2019-08-19T15:48:02-07:00","relpermalink":"/post/post2/","section":"post","summary":"The silent error...","tags":[],"title":"Encapsulating functions to promote stricter functional programming","type":"post"},{"authors":[],"categories":[],"content":"The operators \u0026lt;- and = can be used, almost interchangeably, to assign to variable in the same environment. Yet, \u0026lt;- is preferred and advised in R Coding style guides from Google and Hadley. Some users pointed out on Twitter that this makes code slightly more difficult to read if you come from another programming language. \u0026lt;- is used in F#, OCaml, R and S to my knowledge. Even if \u0026lt;- is generally rare in programming, I suppose its meaning is quite easy to grasp (it\u0026rsquo;s an assignment arrow). Nonetheless this led me down a rabbit hole trying to determine the functional differences with these two assignment operators.\nThis is not just a matter of style and interpretability. There are functional consequences if assignment opperators in R are using incorrectly. R will treat = as a named function argument before it will interpret it as assignment. As an example of where this makes a practical difference:\nwithin(data.frame(a=rnorm(2)), b = a^2) # Error  ## Error in eval(substitute(expr), e): argument is missing, with no default  within(data.frame(a=rnorm(2)), b \u0026lt;- a^2) # Success  ## a b ## 1 -0.5221077 0.27259643 ## 2 0.1855074 0.03441299  Or when you want to handle a possible exception:\ntryCatch(x = runif(5)) # Error  ## Error in tryCatchList(expr, classes, parentenv, handlers): argument \u0026quot;expr\u0026quot; is missing, with no default  tryCatch(x \u0026lt;- runif(5)) # Success  So, if you use = for assignment, you have to remember to treat these situations differently. Which results in your code needing extra levels of brackets/braces, or mixing = and \u0026lt;-. Or you could just use \u0026lt;- everywhere you intend to do assignment and not worry about the edge cases. Keep in mind that this is not to be confused with the other, less common, assignment operators in R (e.g., \u0026lt;\u0026lt;-, -\u0026gt;\u0026gt;, :=, _). I\u0026rsquo;ll hold off an explanation for a future blog post.\nIMO, \u0026lt;- adds some charm to the use of the R programming language. I take pride in it for that reason.\n","date":1564011417,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1564011417,"objectID":"fe859c6266641600992fd6a0d6f11947","permalink":"https://shansabri.github.io/post/post1/","publishdate":"2019-07-24T16:36:57-07:00","relpermalink":"/post/post1/","section":"post","summary":"`","tags":["R"],"title":"Assignment operators in R","type":"post"}]