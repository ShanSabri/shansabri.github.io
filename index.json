[{"authors":["admin"],"categories":null,"content":"Shan Sabri is a current Bioinformatics PhD student being co-mentored in the labs of Kathrin Plath and Jason Ernst at the University of California, Los Angeles. His research interest expand into the field of gene expression regulation, specifically relating to epigenetic mechanisms that maintain pluripotency and underly differentiation and reprogramming processes.\n","date":-62135596800,"expirydate":-62135596800,"kind":"taxonomy","lang":"en","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"https://shansabri.github.io/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/admin/","section":"authors","summary":"Shan Sabri is a current Bioinformatics PhD student being co-mentored in the labs of Kathrin Plath and Jason Ernst at the University of California, Los Angeles. His research interest expand into the field of gene expression regulation, specifically relating to epigenetic mechanisms that maintain pluripotency and underly differentiation and reprogramming processes.","tags":null,"title":"Shan Sabri","type":"authors"},{"authors":[],"categories":[],"content":"The operators \u0026lt;- and = can be used, almost interchangeably, to assign to variable in the same environment. Yet, \u0026lt;- is preferred and advised in R Coding style guides from Google and Hadley. Some users pointed out on Twitter that this makes code slightly more difficult to read if you come from another language. \u0026lt;- is used in F#, OCaml, R and S to my knowledge. Even if \u0026lt;- is generally rare in programming, I guess its meaning is quite easy to grasp, though. Nonetheless this led me down a rabbit hole trying to determine the functional differences with these two assignment operators.\nThis is not just a matter of style and interpretability. There are functional consequences if assignment opperators in R are using incorrectly. R will treat = as a named function argument before it will interpret it as assignment. As an example of where this makes a practical difference:\nwithin(data.frame(a=rnorm(2)), b = a^2) # Error  ## Error in eval(substitute(expr), e): argument is missing, with no default  within(data.frame(a=rnorm(2)), b \u0026lt;- a^2) # Success  ## a b ## 1 -0.5221077 0.27259643 ## 2 0.1855074 0.03441299  Or when you want to handle a possible exception:\ntryCatch(x = runif(5)) # Error  ## Error in tryCatchList(expr, classes, parentenv, handlers): argument \u0026quot;expr\u0026quot; is missing, with no default  tryCatch(x \u0026lt;- runif(5)) # Success  So, if you use = for assignment, you have to remember to treat these situations differently. Which results in your code needing extra levels of brackets/braces, or mixing = and \u0026lt;-. Or you could just use \u0026lt;- everywhere you intend to do assignment and not worry about the edge cases. Keep in mind that this is not to be confused with the other, less common, assignment operators in R (e.g., \u0026lt;\u0026lt;-, -\u0026gt;\u0026gt;, :=, _). I\u0026rsquo;ll hold off an explanation for a future blog post.\nIMO, \u0026lt;- adds some charm to the use of the R programming language. I take pride in it for that reason.\n","date":1563406617,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1563406617,"objectID":"fe859c6266641600992fd6a0d6f11947","permalink":"https://shansabri.github.io/post/post1/","publishdate":"2019-07-17T16:36:57-07:00","relpermalink":"/post/post1/","section":"post","summary":"`","tags":["R"],"title":"Assignment operators in R","type":"post"}]